# running tests twice, so if something breaks when optional dependencies are
# missing, it still shows up. (full coverage would mean running each
# combination, but let's not blow the test matrix out of proportion).

test:tox-bookworm:
  image: debian:bookworm
  resource_group: uses-coap-ports
  script:
    - rm -f .coverage* collected-coverage
    - apt-get update
    - apt-get -y install tox build-essential python3.11-dev libssl-dev autoconf python3-setuptools python3-pip iproute2 libffi-dev libgirepository1.0-dev libcairo2-dev
    # Separate run so I don't waste time telling errors in setup apart from errors at runtime
    - tox --notest
    - "AIOCOAP_TEST_MCIF=\"$(ip -j -6 route list default | python3 -c 'import sys, json; print(json.load(sys.stdin)[0][\"dev\"])')\" tox"
    - mkdir collected-coverage/tox-bookworm/ -p
    - mv .coverage* collected-coverage/tox-bookworm/
  artifacts:
    paths:
      - collected-coverage/tox-bookworm/

test:pypy:
  image: docker.io/pypy:3
  resource_group: uses-coap-ports
  script:
    - rm -f .coverage* collected-coverage
    - apt-get update
    - apt-get -y install build-essential libssl-dev autoconf iproute2 libffi-dev
    - pip install tox
    - tox --notest
    - tox
    - "AIOCOAP_TEST_MCIF=\"$(ip -j -6 route list default | python3 -c 'import sys, json; print(json.load(sys.stdin)[0][\"dev\"])')\" tox"
    # Not generating any coverage: This would slow things down to the point
    # where slow_callback_duration from -Xdev bites, and is thus not enabled
    # for pypy in tox. It's not like pypy should contribute to coverage anyway.

test:3.12:
  image: docker.io/python:3.12
  resource_group: uses-coap-ports
  variables:
    # Necessary because the image uses some Debian as a base that has another Python installed
    TOXENV: "py312-noextras,py312-allextras,py312-uvloop,py312-glib,py312-uvloop-simpleudp"
  script:
    - apt-get update
    # cmake, libgirepository1.0-dev: required for building pygobject
    - apt-get -y install iproute2 cmake libgirepository1.0-dev
    - rm -f .coverage* collected-coverage
    - pip install tox
    # Separate run so I don't waste time telling errors in setup apart from errors at runtime
    - tox --notest
    - "AIOCOAP_TEST_MCIF=\"$(ip -j -6 route list default | python3 -c 'import sys, json; print(json.load(sys.stdin)[0][\"dev\"])')\" tox"
    - mkdir collected-coverage/tox-3.12/ -p
    - mv .coverage* collected-coverage/tox-3.12/
  artifacts:
    paths:
      - collected-coverage/tox-3.12/

test:3.13:
  image: docker.io/python:3.13-rc
  resource_group: uses-coap-ports
  # DTLSSocket fails to build, pending https://github.com/mclab-hbrs/DTLSSocket/pull/10
  allow_failure: true
  variables:
    # Possibly ecessary because the image uses some Debian as a base might have another Python installed
    TOXENV: "py313-noextras,py313-allextras"
  script:
    - apt-get update
    # Actually, cargo doesn't suffice b/c the image is built from bookworm which still has Rust 1.63 whereas cbor-diag's half dependency requires 1.70, but let's tackle this once DTLS works as well.
    - apt-get -y install iproute2 cargo
    - rm -f .coverage* collected-coverage
    - pip install tox
    # Separate run so I don't waste time telling errors in setup apart from errors at runtime
    - tox --notest
    - "AIOCOAP_TEST_MCIF=\"$(ip -j -6 route list default | python3 -c 'import sys, json; print(json.load(sys.stdin)[0][\"dev\"])')\" tox"
    - mkdir collected-coverage/tox-3.13/ -p
    - mv .coverage* collected-coverage/tox-3.13/
  artifacts:
    paths:
      - collected-coverage/tox-3.13/

test:flake:
  image: python:3
  script:
    - pip install flake8
    - flake8 .

reuse:
  image: python:3
  script:
    - pip install reuse
    - reuse lint

pages:
  image: docker.io/python:3
  stage: deploy
  dependencies:
    - test:tox-bookworm
    - test:3.12
    - test:3.13
  script:
    - python3 -m pip install coverage
    - rm -f .coverage* public
    - mv collected-coverage/*/.coverage* .
    - python3 -m coverage combine
    - python3 -m coverage report --include=aiocoap/\*
    - python3 -m coverage html --include=aiocoap/\*
    - mv htmlcov public
  artifacts:
    paths:
      - public
